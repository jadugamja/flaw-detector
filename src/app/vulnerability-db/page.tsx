"use client";

import Link from "next/link";

import {
  Card,
  CardContent,
  CardCoverImage,
  CardFooter,
  CardHeader,
  CardLinkButton,
  CardProps,
  CardSubTitle,
  CardTitle,
  CardTitleProps,
  CardTitleWrapper,
} from "@/components/ui/Card";
import { IconExternalLink, IconPin } from "@/components/ui/Icons";
import { Label } from "@/components/ui/Label";
import Pagination from "@/components/ui/Pagination";
import { Ranking } from "@/components/ui/Ranking";
import { cn } from "@/lib/utils";
import { useState } from "react";

const vulnerabilityDBDatas = [
  {
    id: 1,
    title: "[취약성 경고] Microsoft의 여러 보안 취약점에 대한 CNNVD의 보고서",
    content:
      "최근 Microsoft는 다양한 보안 취약점에 대한 공지를 공식적으로 발표했으며, 이 취약점 공지에는 총 80개의 취약점",
    createdAt: "2024.03.08 13:30:24",
  },
  {
    id: 2,
    title: "2023년 12월 CNNVD 호환 서비스 신제품 발표",
    content:
      "최근 Microsoft는 다양한 보안 취약점에 대한 공지를 공식적으로 발표했으며, 이 취약점 공지에는 총 80개의 취약점",
    createdAt: "2024.03.08 13:30:24",
  },
  {
    id: 3,
    title:
      "[취약성 보고서] CISCO IOS XE 소프트웨어의 보안 취약점에 대한 CNNVD의 보고서",
    content:
      "최근 Microsoft는 다양한 보안 취약점에 대한 공지를 공식적으로 발표했으며, 이 취약점 공지에는 총 80개의 취약점",
    createdAt: "2024.03.08 13:30:24",
  },
  {
    id: 4,
    title:
      "[취약성 경고] Apache Dubbo의 다양한 보안 취약점에 대한 CNNVD의 보고서",
    content:
      "최근 Microsoft는 다양한 보안 취약점에 대한 공지를 공식적으로 발표했으며, 이 취약점 공지에는 총 80개의 취약점",
    createdAt: "2024.03.08 13:30:24",
  },
  {
    id: 5,
    title: "[취약성 경고] Microsoft의 다양한 보안 취약점에 대한 CNNVD의 보고서",
    content:
      "최근 Microsoft는 다양한 보안 취약점에 대한 공지를 공식적으로 발표했으며, 이 취약점 공지에는 총 80개의 취약점",
    createdAt: "2024.03.08 13:30:24",
  },
];

export default function VulnerabilityDBPage() {
  const [currentPage, setCurrentPage] = useState(1);
  const totalPages = Math.ceil(vulnerabilityDBDatas.length / 5); // 카드 5개마다 1페이지

  const pagesPerGroup = 10; //페이지 그룹 단위
  const currentGroup = Math.ceil(currentPage / pagesPerGroup);
  const startPage = (currentGroup - 1) * pagesPerGroup + 1;
  const endPage = Math.min(startPage + pagesPerGroup - 1, totalPages);

  const onChangePage = (page: number) => {
    setCurrentPage(page);
  };

  return (
    <div className="mx-auto mb-[1.188rem] mt-[1.688rem] flex w-[82.063rem] flex-col gap-[4.75rem]">
      <CardContainer />
      <div className="flex gap-[6.375rem]">
        {/* 취약점 DB */}
        <VulnerabilityDB />
        {/* 실시간 Topic */}
        <RealTimeTopic />
      </div>
      <div className="flex justify-center">
        <Pagination
          currentPage={currentPage}
          totalPages={totalPages}
          startPage={startPage}
          endPage={endPage}
          onChangePage={onChangePage}
        />
      </div>
    </div>
  );
}

function CardContainer() {
  const topThreeVulnerabilityDatas = vulnerabilityDBDatas.slice(0, 3); // 카드에 넣을 상위 3개 데이터만 가져오기 (임시)
  const cardDatas = topThreeVulnerabilityDatas.map((item, index) => {
    const cardStyles = [
      {
        cardSize: "main",
        imageSrc: "/images/cardThumbnail1.png",
        titleSize: "big",
        subtitleSize: "default",
      },
      {
        cardSize: "sub",
        imageSrc: "/images/cardThumbnail2.png",
        titleSize: "xsmall",
        subtitleSize: "small",
      },
      {
        cardSize: "sub",
        imageSrc: "/images/cardThumbnail3.png",
        titleSize: "small",
        subtitleSize: "small",
      },
    ];

    return { ...item, ...cardStyles[index] };
  });

  return (
    <div className="flex gap-7">
      {cardDatas.map((cardData) => {
        return (
          <Card
            key={cardData.id}
            variant="image"
            size={cardData.cardSize as CardProps["size"]}
          >
            <CardCoverImage
              src={cardData.imageSrc}
              alt={`미리보기 이미지: ${cardData.title}`}
            />
            <CardFooter className="items-end">
              <CardTitleWrapper
                className={cn(
                  cardData.id === 1
                    ? "w-[27.5rem]"
                    : cardData.id === 2
                      ? "w-[8.5rem]"
                      : "w-[8.688rem]",
                )}
              >
                <CardTitle
                  size={cardData.titleSize as CardTitleProps["size"]}
                  weight="bold"
                  color="white"
                  className={cn(
                    "block overflow-visible text-clip whitespace-normal",
                    cardData.id === 1 && "leading-[2.118rem]",
                  )}
                >
                  {cardData.title}
                </CardTitle>
                <CardSubTitle
                  size={cardData.subtitleSize as CardTitleProps["size"]}
                >
                  {cardData.createdAt}
                </CardSubTitle>
              </CardTitleWrapper>
              <Link
                href={`vulnerability-db/${cardData.id}`}
                passHref
                legacyBehavior
              >
                <CardLinkButton />
              </Link>
            </CardFooter>
          </Card>
        );
      })}
    </div>
  );
}

function VulnerabilityDB() {
  return (
    <section>
      <h2 className="text-2xl font-semibold leading-[1.816rem] tracking-[-0.01em]">
        취약점 DB
      </h2>
      <div className="my-4">
        <Label className="mr-3">HOT</Label>
        <Label variant="unselected">NEW</Label>
      </div>
      <ul className="flex flex-col gap-4">
        {vulnerabilityDBDatas.map((data) => {
          return (
            <li key={data.id}>
              <Card variant="article" size="long">
                <CardHeader className="gap-0">
                  <div className="mb-2 flex items-center gap-2">
                    <Label>HOT</Label>
                    <CardTitle
                      size="small"
                      color="black"
                      className="line-clamp-1 font-normal"
                    >
                      {data.title}
                    </CardTitle>
                  </div>
                  <CardSubTitle
                    isSingleLine
                    className="block truncate text-line-dark"
                  >
                    Microsoft
                  </CardSubTitle>
                </CardHeader>
                <CardContent className="bg-purple-light">
                  <span className="block truncate text-[#797979]">
                    {data.content}
                  </span>
                </CardContent>
                <CardFooter>
                  <div className="flex gap-3">
                    <IconPin width={28} height={28} />
                    <IconExternalLink />
                  </div>
                  {/* createdAt의 날짜에서 현재 날짜 기준으로 계산 예정. 기능 추가할 때 수정하겠습니다! */}
                  <CardSubTitle color="#A2A2A2">2일 전</CardSubTitle>
                </CardFooter>
              </Card>
            </li>
          );
        })}
      </ul>
    </section>
  );
}

function RealTimeTopic() {
  return (
    <section className="flex flex-col gap-4">
      <h2 className="text-2xl font-semibold leading-[1.816rem] tracking-[-0.01em]">
        실시간 Topic
      </h2>
      <p className="text-lg font-medium leading-[1.361rem] tracking-[-0.01em] text-gray-default">
        03.08 10:00시 기준
      </p>
      <Ranking />
    </section>
  );
}

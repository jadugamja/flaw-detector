import { ArticleDetailProps, VulDBPost } from "@/types/post";
import { IconPin, IconShare } from "../ui/Icons";
import { Label } from "../ui/Label";
import { formatTimestampAsDateTime } from "@/lib/utils";
import { Timestamp } from "firebase/firestore";
import { isCertCCContentType } from "@/types/typeGuards";
import Link from "next/link";

function ArticleDetailHeader({ post }: { post: VulDBPost }) {
  const haveUpdatedAt = post.source_updated_at;

  return (
    <section className="w-[82.125rem] border-b border-b-line-default p-[1.75rem_0_3.75rem_0]">
      <Label variant="new" className="mb-[1.216rem]">
        NEW
      </Label>
      <h1 className="mb-8 text-4xl font-medium leading-[2.723rem] tracking-[-0.01em]">
        {post?.title?.translated || "제목이 없습니다."}
      </h1>
      <div className="flex items-center justify-between text-xl font-normal leading-[1.512rem] text-gray-default">
        <div className="flex gap-9 tracking-[-0.01em]">
          <p>취약성 뉴스 세부정보</p>
          <p>
            업로드시간 |{" "}
            {post.created_at ? formatTimestampAsDateTime(post.created_at) : ""}
          </p>
          <p>
            출시시간 |{" "}
            {haveUpdatedAt
              ? formatTimestampAsDateTime(post.source_updated_at as Timestamp)
              : formatTimestampAsDateTime(post.source_created_at)}
          </p>
        </div>
        <div className="flex gap-[1.625rem]">
          <IconPin />
          <IconShare />
        </div>
      </div>
    </section>
  );
}

function CertCCContent({ post }: { post: VulDBPost }) {
  if (!isCertCCContentType(post.content)) return null;

  const { overview, description, impact, solution, cveIDs } = post.content;

  const renderSection = (
    title: string,
    contentArray: { id: string; text: string }[] | undefined,
  ) => {
    if (!contentArray || contentArray.length === 0) return null;

    return (
      <section className="text-2xl font-medium text-gray-dark">
        <h2 className="mb-2">{title}</h2>
        {contentArray.map((item) => (
          <p key={item.id} className="leading-10">
            {item.text}
          </p>
        ))}
      </section>
    );
  };

  return (
    <div className="mb-14 flex w-[80.25rem] flex-col gap-14">
      {renderSection("1. 개요", overview?.translated)}
      {renderSection("2. 설명", description?.translated)}
      {renderSection("3. 영향", impact?.translated)}
      {renderSection("4. 해결책", solution?.translated)}
      {cveIDs.length > 0 && (
        <section className="w-full text-2xl font-medium text-gray-dark">
          <h2 className="mb-2">5. CVE ID</h2>
          <ul className="gap-y- flex flex-wrap gap-x-5">
            {cveIDs.map((item) => (
              <li
                key={item}
                className="leading-10 text-red-500 underline-offset-2 hover:underline"
              >
                <Link
                  href={`https://www.cve.org/CVERecord?id=${item}`}
                  target="_blank"
                >
                  {item}
                </Link>
              </li>
            ))}
          </ul>
        </section>
      )}
    </div>
  );
}

function CNNVDContent({ post }: { post: VulDBPost }) {
  return (
    <div className="mx-auto mb-[3.75rem] h-[43.75rem] w-[82.125rem] gap-[0.625rem] border-b border-b-gray-500 pb-[3.75rem]">
      <div className="max-h-[43.75rem] overflow-y-auto px-[0.938rem] text-2xl font-normal leading-[2.25rem] tracking-[-0.01em]">
        {/* {content?.split("\n").map((paragraph, idx) => (
      <p key={idx} className="mb-4 text-justify">
        {paragraph}
      </p>
    ))} */}
      </div>
    </div>
  );
}

export default function ArticleDetail({ post }: { post: VulDBPost }) {
  return (
    <>
      <ArticleDetailHeader post={post} />
      {post.source === "CERT/CC" && <CertCCContent post={post} />}
      {post.source === "CNNVD" && <CNNVDContent post={post} />}
    </>
  );
}

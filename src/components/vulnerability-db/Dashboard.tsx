"use client";

import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardSubTitle,
  CardTitle,
} from "@/components/ui/Card";
import { IconExternalLink, IconPin } from "@/components/ui/Icons";
import { Label } from "@/components/ui/Label";
import { Ranking } from "@/components/ui/Ranking";
import { vulnerabilityDBDatas } from "@/lib/dummy";
import { useState } from "react";
import Pagination from "../ui/Pagination";

export default function Dashboard() {
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 5; // 페이지 당 카드 수
  const totalPages = Math.ceil(vulnerabilityDBDatas.length / itemsPerPage); // 카드 5개마다 1페이지

  const pagesPerGroup = 10; //페이지 그룹 단위
  const currentGroup = Math.ceil(currentPage / pagesPerGroup);
  const startPage = (currentGroup - 1) * pagesPerGroup + 1;
  const endPage = Math.min(startPage + pagesPerGroup - 1, totalPages);

  // 현재 페이지에 해당하는 데이터만 가져오기
  const currentData = vulnerabilityDBDatas.slice(
    (currentPage - 1) * itemsPerPage,
    currentPage * itemsPerPage,
  );

  return (
    <>
      <div className="flex gap-[6.375rem]">
        {/* 취약점 DB */}
        <VulnerabilityDB currentData={currentData} />
        {/* 실시간 Topic */}
        <RealTimeTopic />
      </div>
      <div className="flex justify-center">
        <Pagination
          currentPage={currentPage}
          totalPages={totalPages}
          startPage={startPage}
          endPage={endPage}
          setCurrentPage={setCurrentPage}
        />
      </div>
    </>
  );
}

function VulnerabilityDB({
  currentData,
}: {
  currentData: typeof vulnerabilityDBDatas;
}) {
  return (
    <section>
      <h2 className="text-2xl font-semibold leading-[1.816rem] tracking-[-0.01em]">
        취약점 DB
      </h2>
      <div className="my-4">
        <Label className="mr-3">HOT</Label>
        <Label variant="unselected">NEW</Label>
      </div>
      <ul className="flex flex-col gap-4">
        {currentData.map((data) => {
          return (
            <li key={data.id}>
              <Card variant="article" size="long">
                <CardHeader className="gap-0">
                  <div className="mb-2 flex items-center gap-2">
                    <Label>HOT</Label>
                    <CardTitle
                      size="small"
                      color="black"
                      className="line-clamp-1 font-normal"
                    >
                      {data.title}
                    </CardTitle>
                  </div>
                  <CardSubTitle
                    isSingleLine
                    className="block truncate text-line-dark"
                  >
                    Microsoft
                  </CardSubTitle>
                </CardHeader>
                <CardContent className="bg-purple-light">
                  <span className="block truncate text-[#797979]">
                    {data.content}
                  </span>
                </CardContent>
                <CardFooter>
                  <div className="flex gap-3">
                    <IconPin width={28} height={28} />
                    <IconExternalLink />
                  </div>
                  {/* createdAt의 날짜에서 현재 날짜 기준으로 계산 예정. 기능 추가할 때 수정하겠습니다! */}
                  <CardSubTitle color="#A2A2A2">2일 전</CardSubTitle>
                </CardFooter>
              </Card>
            </li>
          );
        })}
      </ul>
    </section>
  );
}

function RealTimeTopic() {
  return (
    <section className="flex flex-col gap-4">
      <h2 className="text-2xl font-semibold leading-[1.816rem] tracking-[-0.01em]">
        실시간 Topic
      </h2>
      <p className="text-lg font-medium leading-[1.361rem] tracking-[-0.01em] text-gray-default">
        03.08 10:00시 기준
      </p>
      <Ranking />
    </section>
  );
}

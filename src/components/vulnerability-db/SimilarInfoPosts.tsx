"use client";

import {
  Card,
  CardFooter,
  CardHeader,
  CardSubTitle,
  CardTitle,
} from "@/components/ui/Card";
import { Label } from "@/components/ui/Label";
import { formatTimestampAsDaysAgo } from "@/lib/utils";
import { useVulDBPostsStore } from "@/stores/useVulDBPostsStore";
import { VulDBPinnedInfo, VulDBPost, VulDBPostWithChip } from "@/types/post";
import { isCertCCContentType } from "@/types/typeGuards";
import Link from "next/link";
import { useLayoutEffect, useMemo, useState } from "react";
import { LabelSkeleton } from "./ArticleDetailHeader";
import VulDBPin from "./VulDBPin";
import VulDBShare from "./VulDBShare";

function SkeletonCard() {
  return (
    <Card
      variant="article"
      size="short"
      className="h-[17.375rem] animate-pulse rounded-[1.25rem]"
    >
      <div className="flex-col-center-start relative h-fit flex-wrap items-center gap-2">
        <LabelSkeleton />
        <div className="mb-2 mt-2 h-7 w-full rounded bg-gray-200" />
        <div className="h-7 w-full rounded bg-gray-200" />
      </div>
      <div className="h-6 w-full rounded bg-gray-200" />
      <div className="flex items-center justify-between">
        <div className="inline-flex gap-4">
          <div className="h-8 w-8 rounded-full bg-gray-200" />
          <div className="h-8 w-8 rounded-full bg-gray-200" />
        </div>
        <div className="h-5 w-1/6 rounded bg-gray-200" />
      </div>
    </Card>
  );
}

function SimilarInfoPostCard({
  post,
  userId,
}: {
  post: VulDBPostWithChip;
  userId: string;
}) {
  if (!post) return null;

  const pinnedInfo: VulDBPinnedInfo = { userId, postId: post.id };

  return (
    <Card
      variant="article"
      size="short"
      className="h-[17.375rem] rounded-[1.25rem]"
    >
      <CardHeader>
        {post.chip === "new" && (
          <Label variant="new" className="mb-2">
            NEW
          </Label>
        )}
        {post.chip === "hot" && <Label className="mb-2">HOT</Label>}
        <CardTitle weight="bold">
          {post.title?.translated || "제목이 없습니다."}
        </CardTitle>
      </CardHeader>
      {post.source === "CERT/CC" &&
        isCertCCContentType(post.content) &&
        post.content?.overview?.translated.map((item) => (
          <CardSubTitle
            size="big"
            isSingleLine
            key={item.id}
            className="block truncate font-medium"
          >
            {item.text || "내용이 없습니다."}
          </CardSubTitle>
        ))}
      {/* CNNVD 데이터가 db에 들어오면 추가 예정 */}
      <CardFooter>
        <div className="inline-flex gap-4">
          <VulDBPin pinnedInfo={pinnedInfo} />
          <VulDBShare postId={post.id} />
        </div>
        <CardSubTitle className="font-medium">
          {post.created_at
            ? formatTimestampAsDaysAgo(post.created_at)
            : "작성일이 없습니다."}
        </CardSubTitle>
      </CardFooter>
    </Card>
  );
}

export default function SimilarInfoPosts({
  posts,
  postId,
  userId,
}: {
  posts: VulDBPost[];
  postId: string;
  userId: string;
}) {
  const { vulDBPostsWithChip } = useVulDBPostsStore();
  const [isMounted, setIsMounted] = useState(false);

  useLayoutEffect(() => {
    setIsMounted(true);
  }, []);

  const topSixRecentPosts: VulDBPostWithChip[] = useMemo<any[]>(() => {
    return vulDBPostsWithChip
      .filter((post) => post.id !== postId)
      .slice(0, 6)
      .map((filteredPost) => {
        const matchingPost = posts.find((post) => post.id === filteredPost.id);

        return {
          ...filteredPost,
          ...matchingPost,
        };
      });
  }, [vulDBPostsWithChip, postId, posts]);

  return (
    <section className="w-full max-w-[82.125rem]">
      <h2 className="mb-4 text-2xl font-semibold leading-[1.816rem] tracking-[-0.01em]">
        비슷한 정보글
      </h2>
      <ul className="grid grid-cols-3 gap-9">
        {isMounted
          ? topSixRecentPosts.map((post) => {
              return (
                <li key={post.id}>
                  <Link href={`/vuldb/items/${post.id}`}>
                    <SimilarInfoPostCard post={post} userId={userId} />
                  </Link>
                </li>
              );
            })
          : Array.from({ length: 6 }).map((_, index) => (
              <li key={index}>
                <SkeletonCard />
              </li>
            ))}
      </ul>
    </section>
  );
}

"use client";

import { Label } from "@/components/ui/Label";
import { loginWithGithub } from "@/lib/actions";
import { ITEMS_PER_DB_PAGE, PAGES_PER_GROUP } from "@/lib/const";
import { VulDBPost, VulDBPostWithChip } from "@/types/post";
import { Timestamp } from "firebase/firestore";
import { SessionProvider, useSession } from "next-auth/react";
import { useEffect, useState, useTransition } from "react";
import Button from "../ui/Button";
import { Modal, ModalTitle, ModalTitleWrapper } from "../ui/Modal";
import Pagination from "../ui/Pagination";
import RealTimeTopic from "./RealTimeTopic";
import VulDBList from "./VulDBList";

const applyNewChip = (posts: VulDBPost[]): VulDBPostWithChip[] => {
  const now = new Date();

  return posts
    .map((post) => {
      const postDate = new Timestamp(
        post.created_at.seconds,
        post.created_at.nanoseconds,
      ).toDate();
      const diffInHours =
        (now.getTime() - postDate.getTime()) / (1000 * 60 * 60);

      const chip: "new" | "" = diffInHours <= 48 ? "new" : "";

      return {
        ...post,
        chip,
      };
    })
    .sort((a, b) => {
      const dateA = new Timestamp(
        a.created_at.seconds,
        a.created_at.nanoseconds,
      ).toDate();
      const dateB = new Timestamp(
        b.created_at.seconds,
        b.created_at.nanoseconds,
      ).toDate();
      return dateB.getTime() - dateA.getTime();
    });
};

const applyHotChip = (posts: VulDBPost[]): VulDBPostWithChip[] => {
  return posts
    .sort((a, b) => b.views - a.views)
    .map((post, index) => ({
      ...post,
      chip: index < 10 ? "hot" : "",
    }));
};

function VulDB({
  posts,
  setSelectedChip,
  selectedChip,
}: {
  posts: VulDBPostWithChip[];
  setSelectedChip: (label: "hot" | "new") => void;
  selectedChip: "hot" | "new";
}) {
  const [_, startTransition] = useTransition();
  const { data: session, status } = useSession();

  if (status === "loading") {
    return <div>Skeleton...</div>;
  }

  const onClickChip = (chip: "hot" | "new") => {
    setSelectedChip(chip);
  };

  return (
    <section className="relative">
      <h2 className="text-2xl font-semibold leading-[1.816rem] tracking-[-0.01em]">
        취약점 DB
      </h2>
      <div className="my-4">
        <Label
          variant={selectedChip === "new" ? "unselected" : "hot"}
          className="mr-3 cursor-pointer"
          onClick={() => onClickChip("hot")}
        >
          HOT
        </Label>
        <Label
          variant={selectedChip === "hot" ? "unselected" : "new"}
          className="cursor-pointer"
          onClick={() => onClickChip("new")}
        >
          NEW
        </Label>
      </div>
      {session ? (
        <VulDBList posts={posts} />
      ) : (
        <>
          <Modal
            variant="login"
            size="small"
            className="-top-[28.8%] px-0"
            isOpen
          >
            <ModalTitleWrapper variant="login">
              <ModalTitle className="text-xl font-medium leading-[1.513rem]">
                자세한 정보를 보고싶다면?
              </ModalTitle>
            </ModalTitleWrapper>
            <Button
              variant="outlined"
              shape="pill"
              className="h-[4.625rem] p-[1.25rem_2rem] text-[1.75rem] font-light leading-[2.118rem] tracking-[-0.01em]"
              onClick={() =>
                startTransition(async () => await loginWithGithub())
              }
            >
              Login
            </Button>
          </Modal>
          <div className="block size-full whitespace-pre-wrap blur-[0.5rem]">
            <VulDBList posts={posts.slice(0, ITEMS_PER_DB_PAGE)} />
          </div>
        </>
      )}
    </section>
  );
}

export default function VulDBDashboard({ posts }: { posts: VulDBPost[] }) {
  const [currentPage, setCurrentPage] = useState(1);
  const [selectedChip, setSelectedChip] = useState<"hot" | "new">("hot");
  const [sortedPosts, setSortedPosts] = useState<VulDBPostWithChip[]>([]);

  useEffect(() => {
    let updatedPosts: VulDBPostWithChip[] = [];
    if (selectedChip === "hot") {
      updatedPosts = applyHotChip(posts);
    } else if (selectedChip === "new") {
      updatedPosts = applyNewChip(posts);
    }

    setSortedPosts(updatedPosts);
  }, [selectedChip]);

  const totalPages = Math.ceil(sortedPosts.length / ITEMS_PER_DB_PAGE);

  const currentGroup = Math.ceil(currentPage / PAGES_PER_GROUP);
  const startPage = (currentGroup - 1) * PAGES_PER_GROUP + 1;
  const endPage = Math.min(startPage + PAGES_PER_GROUP - 1, totalPages);

  const currentData = sortedPosts.slice(
    (currentPage - 1) * ITEMS_PER_DB_PAGE,
    currentPage * ITEMS_PER_DB_PAGE,
  );

  return (
    <SessionProvider>
      <div className="flex gap-[6.375rem]">
        {/* 취약점 DB */}
        <VulDB
          posts={currentData}
          setSelectedChip={setSelectedChip}
          selectedChip={selectedChip}
        />
        {/* 실시간 Topic */}
        <RealTimeTopic />
      </div>
      <div className="flex justify-center">
        <Pagination
          currentPage={currentPage}
          totalPages={totalPages}
          startPage={startPage}
          endPage={endPage}
          setCurrentPage={setCurrentPage}
        />
      </div>
    </SessionProvider>
  );
}

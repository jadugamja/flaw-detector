"use client";

import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardSubTitle,
  CardTitle,
} from "@/components/ui/Card";
import { IconExternalLink, IconPin } from "@/components/ui/Icons";
import { Label } from "@/components/ui/Label";
import { Ranking } from "@/components/ui/Ranking";
import { loginWithGithub } from "@/lib/actions";
import { ITEMS_PER_DB_PAGE, PAGES_PER_GROUP } from "@/lib/const";
import { formatTimestampAsDaysAgo } from "@/lib/utils";
import { VulDBPost } from "@/types/post";
import { isCertCCContentType, isCnnvdContentType } from "@/types/typeGuards";
import { SessionProvider, useSession } from "next-auth/react";
import { useState, useTransition } from "react";
import Button from "../ui/Button";
import { Modal, ModalTitle, ModalTitleWrapper } from "../ui/Modal";
import Pagination from "../ui/Pagination";

function VulDBList({ currentData }: { currentData: VulDBPost[] }) {
  if (!currentData || currentData.length === 0) {
    return <p className="text-gray-500">데이터가 없습니다.</p>; // 임시
  }

  return (
    <ul className="flex flex-col gap-4">
      {currentData.map((data: VulDBPost) => {
        const daysAgo = formatTimestampAsDaysAgo(data.created_at);
        return (
          <li key={data.id}>
            <Card variant="article" size="long">
              <CardHeader className="gap-0">
                <div className="mb-2 flex items-center gap-2">
                  <Label>HOT</Label>
                  <CardTitle
                    size="small"
                    color="black"
                    className="line-clamp-1 font-normal"
                  >
                    {data.title.translated || data.title.original}
                  </CardTitle>
                </div>
                <CardSubTitle
                  isSingleLine
                  className="block truncate text-line-dark"
                >
                  {data.source}
                </CardSubTitle>
              </CardHeader>
              <CardContent className="bg-purple-light">
                <div className="block truncate">
                  {data.source === "CERT/CC"
                    ? isCertCCContentType(data.content) && (
                        <>
                          {data.content.overview.translated.map((item) => {
                            return (
                              <span key={item.id} className="text-[#797979]">
                                {item.text}
                              </span>
                            );
                          })}
                        </>
                      )
                    : isCnnvdContentType(data.content) && (
                        <>
                          {Array.isArray(
                            data.content.description.translated,
                          ) ? (
                            data.content.description.translated.map((item) => (
                              <span key={item} className="text-[#797979]">
                                {item}
                              </span>
                            ))
                          ) : (
                            <span className="text-[#797979]">
                              {data.content.description.translated}
                            </span>
                          )}
                        </>
                      )}
                </div>
              </CardContent>
              <CardFooter>
                <div className="flex gap-3">
                  <IconPin width={28} height={28} />
                  <IconExternalLink />
                </div>
                <CardSubTitle color="#A2A2A2">{daysAgo}</CardSubTitle>
              </CardFooter>
            </Card>
          </li>
        );
      })}
    </ul>
  );
}

function VulDB({ currentData }: { currentData: VulDBPost[] }) {
  const [_, startTransition] = useTransition();
  const { data: session, status } = useSession();

  if (status === "loading") {
    return <div>Skeleton...</div>;
  }

  return (
    <section className="relative">
      <h2 className="text-2xl font-semibold leading-[1.816rem] tracking-[-0.01em]">
        취약점 DB
      </h2>
      <div className="my-4">
        <Label className="mr-3">HOT</Label>
        <Label variant="unselected">NEW</Label>
      </div>
      {session ? (
        <VulDBList currentData={currentData} />
      ) : (
        <>
          <Modal
            variant="login"
            size="small"
            className="-top-[28.8%] px-0"
            isOpen
          >
            <ModalTitleWrapper variant="login">
              <ModalTitle className="text-xl font-medium leading-[1.513rem]">
                자세한 정보를 보고싶다면?
              </ModalTitle>
            </ModalTitleWrapper>
            <Button
              variant="outlined"
              shape="pill"
              className="h-[4.625rem] p-[1.25rem_2rem] text-[1.75rem] font-light leading-[2.118rem] tracking-[-0.01em]"
              onClick={() =>
                startTransition(async () => await loginWithGithub())
              }
            >
              Login
            </Button>
          </Modal>
          <div className="block size-full whitespace-pre-wrap blur-[0.5rem]">
            <VulDBList currentData={currentData.slice(0, ITEMS_PER_DB_PAGE)} />
          </div>
        </>
      )}
    </section>
  );
}

function RealTimeTopic() {
  return (
    <section className="flex flex-col gap-4">
      <h2 className="text-2xl font-semibold leading-[1.816rem] tracking-[-0.01em]">
        실시간 Topic
      </h2>
      <p className="text-lg font-medium leading-[1.361rem] tracking-[-0.01em] text-gray-default">
        03.08 10:00시 기준
      </p>
      <Ranking />
    </section>
  );
}

export default function VulDBDashboard({ posts }: { posts: VulDBPost[] }) {
  const [currentPage, setCurrentPage] = useState(1);
  const totalPages = Math.ceil(posts.length / ITEMS_PER_DB_PAGE); // 카드 5개마다 1페이지

  const currentGroup = Math.ceil(currentPage / PAGES_PER_GROUP);
  const startPage = (currentGroup - 1) * PAGES_PER_GROUP + 1;
  const endPage = Math.min(startPage + PAGES_PER_GROUP - 1, totalPages);

  // 현재 페이지에 해당하는 데이터만 가져오기
  const currentData = posts.slice(
    (currentPage - 1) * ITEMS_PER_DB_PAGE,
    currentPage * ITEMS_PER_DB_PAGE,
  );

  return (
    <SessionProvider>
      <div className="flex gap-[6.375rem]">
        {/* 취약점 DB */}
        <VulDB currentData={currentData} />
        {/* 실시간 Topic */}
        <RealTimeTopic />
      </div>
      <div className="flex justify-center">
        <Pagination
          currentPage={currentPage}
          totalPages={totalPages}
          startPage={startPage}
          endPage={endPage}
          setCurrentPage={setCurrentPage}
        />
      </div>
    </SessionProvider>
  );
}

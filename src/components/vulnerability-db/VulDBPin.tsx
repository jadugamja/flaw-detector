"use client";

import { showToast } from "@/components/vulnerability-db/Toast";
import { addPinnedPostToUser, deletePinnedPostFromUser } from "@/lib/api/users";
import { useVulDBPostsStore } from "@/stores/useVulDBPostsStore";
import { VulDBPinnedInfo } from "@/types/post";
import { useState } from "react";
import { IconFilledPin, IconPin } from "../ui/Icons";

export default function VulDBPin({
  pinnedInfo,
  isScrapped,
}: {
  pinnedInfo: VulDBPinnedInfo;
  isScrapped: boolean;
}) {
  const [isClicked, setIsClicked] = useState(false);
  const { scrapPost, unscrapPost } = useVulDBPostsStore();

  const onClickVulDBPin = async (
    event: React.MouseEvent<HTMLButtonElement>,
  ) => {
    try {
      event.stopPropagation();
      event.preventDefault();

      if (isScrapped) {
        setIsClicked(false);
        await deletePinnedPostFromUser(pinnedInfo);
        unscrapPost(pinnedInfo.postId);

        showToast("✅ 스크랩이 취소되었습니다!");
      } else {
        setIsClicked(true);
        await addPinnedPostToUser(pinnedInfo);
        scrapPost(pinnedInfo.postId);

        showToast("📌 스크랩이 추가되었습니다!");
      }
    } catch (error) {
      setIsClicked(false);

      if (isScrapped) {
        showToast("🚨 스크랩 취소에 실패했습니다.");
      } else {
        showToast("🚨 스크랩에 실패했습니다.");
      }

      console.error(error);
    }
  };

  return (
    <button onClick={onClickVulDBPin}>
      {isScrapped || isClicked ? <IconFilledPin /> : <IconPin />}
    </button>
  );
}
